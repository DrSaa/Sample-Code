import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from mpl_toolkits.mplot3d import Axes3D
import visutils  

class Camera:
    """
    A simple data structure describing camera parameters 
    
    The parameters describing the camera
    cam.f : float   --- camera focal length (in units of pixels)
    cam.c : 2x1 vector  --- offset of principle point
    cam.R : 3x3 matrix --- camera rotation
    cam.t : 3x1 vector --- camera translation 

    
    """    
    def __init__(self,f,c,R,t):
        self.f = f
        self.c = c
        self.R = R
        self.t = t

        
    def project(self,pts3):
        """
        Project the given 3D points in world coordinates into the specified camera    

        Parameters
        ----------
        pts3 : 2D numpy.array (dtype=float)
            Coordinates of N points stored in a array of shape (3,N)

        Returns
        -------
        pts2 : 2D numpy.array (dtype=float)
            Image coordinates of N points stored in an array of shape (2,N)

        """

        assert(pts3.shape[0]==3)

        # X' = ((X - Xc) * (F/Z)) + Xc

        # Y' = ((Y - Yc) * (F/Z)) + Yc


        pts3 = np.array(np.transpose(self.R)@(pts3-self.t))

        pts2 = pts3[0:2,:]*self.f/pts3[2,:]+cam.c
        #np.vstack((pts2, np.ones((1,pts3.shape[1]))))

        
        assert(pts2.shape[1]==pts3.shape[1])
        assert(pts2.shape[0]==2)
    
        return pts2
    
    
    
def generate_hemisphere(radius,center,npts):
    """
    Generate a set of 3D points which are randomly distributed on the
    surface of a hemisphere for purposes of testing your code.
    
    Parameters
    ----------
    radius : float
        Hemisphere radius

    center : numpy.array (dtype=float)
        3x1 vector specifying the center of the hemisphere
        
    npts : int
        number of points to generate

    Returns
    -------
    x : 2D numpy.array (dtype=float)
        (3,npts) array containing coordinates of the points
        
    """
    
    assert(center.shape==(3,1))
    
    #set the random seed so we get the same points every time
    np.random.seed(1)
    
    #generate randomly distributed points
    x = np.random.standard_normal((3,npts))
    
    #scale points to the surface of a sphere with given radius
    nx = np.sqrt(np.sum(x*x,axis=0))
    x = radius * x / nx
    
    # make points with positive z-coordinates negative
    # so that points are all on a half-sphere 
    x[2,:] = -np.abs(x[2,:])
    
    # translate to desired position
    x = x + center
    
    return x
    
    
    
def triangulate(pts2L,camL,pts2R,camR):
    """
    Triangulate the set of points seen at location pts2L / pts2R in the
    corresponding pair of cameras. Return the 3D coordinates relative
    to the global coordinate system


    Parameters
    ----------
    pts2L : 2D numpy.array (dtype=float)
        Coordinates of N points stored in a array of shape (2,N) seen from camL camera

    pts2R : 2D numpy.array (dtype=float)
        Coordinates of N points stored in a array of shape (2,N) seen from camR camera

    camL : Camera
        The first "left" camera view

    camR : Camera
        The second "right" camera view

    Returns
    -------
    pts3 : 2D numpy.array (dtype=float)
        (3,N) array containing 3D coordinates of the points in global coordinates

    """


    pts3 = np.zeros((3,1))
    for i in range(0,pts2L.shape[1]):
        ql = np.matrix([[(pts2L[0][i]-camL.c[0])/camL.f],
                        [(pts2L[1][i]-camL.c[1])/camL.f],
                        [1]])
        qr = np.matrix([[(pts2R[0][i]-camR.c[0])/camR.f],
                        [(pts2R[1][i]-camR.c[1])/camR.f],
                        [1]])
        

        assert(ql.shape==(3,1))
        assert(qr.shape==(3,1))
        A = np.concatenate((np.matmul(camL.R,ql), -np.matmul(camR.R,qr)), axis=1)#np.matmul(camL.R,ql) np.matmul(camR.R,qr)
        A = np.matrix(A, dtype='float')
        assert(A.shape==(3,2))
        b = camR.t - camL.t
        assert(b.shape==(3,1))
        u,residuals,rank,s = np.linalg.lstsq(A,b)
        u = np.array(u)
        assert(u.shape==(2,1))
        PL = u[0]*np.array(ql)
        PR = u[1]*np.array(qr)
        P1 = np.matmul(camL.R,PL) + camL.t
        P2 = np.matmul(camR.R,PR) + camR.t
        P = np.array((P1+P2)/2)
        assert(P.shape==(3,1))
        pts3 = np.concatenate((pts3, P), axis=1)
    pts3 = pts3[:,1:]
    print(pts3.shape)
    assert(pts3.shape==(3,pts2L.shape[1]))
    return pts3
    
    
